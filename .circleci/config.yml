# CircleCI Data Collection config

version: 2.0

references:
  workspace_root: &workspace_root
    /tmp/workspace

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root


jobs:
  publish_image:
    docker:
      - image: circleci/python:3.6-jessie-node

    environment:
      - AWS_ACCOUNT_PROD: "583912811210"
      - AWS_ACCOUNT_STAGE: "897117390337"
      - AWS_ACCOUNT_ASSETS: "936368275341"
      - AWS_REGION: "us-east-1"

    steps:
      - *attach_workspace
      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: install AWS Cli
          command: sudo pip install awscli --upgrade

      - checkout

      # Setup workspace directory
      - run: mkdir -p /tmp/workspace

      # For builds we use base images hosted at Docker Hub, private repo
      - run :
          name: auth AWS ECR and Docker Hub
          command: |
            set -exu
            docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}
            eval $(aws ecr get-login --region ${AWS_REGION} --no-include-email --registry-ids ${AWS_ACCOUNT_ASSETS})

      # build and push Docker image
      # Note that this will push 2 images, one tagged with the branch name and the other with the build ID
      #
      # Long Term we are shifting to one, central image repository under Assets AWS account,
      # but for transitional reasons, still pushing to Prod and Stage AWS accounts too.
      - run:
          name: Build and publish image
          command: |
            set -exu
            export REPOSITORY_URL=${AWS_ACCOUNT_ASSETS}.dkr.ecr.${AWS_REGION}.amazonaws.com/
            make print_image_name_build > /tmp/workspace/image_url
            echo Image URL: `cat /tmp/workspace/image_url`
            make push_image

      # Remove this once deploy logic is fully adapted to Assets repos
      - run:
          name: push image to Prod repo
          command: |
            export AWS_ACCOUNT=${AWS_ACCOUNT_PROD}
            eval $(aws ecr get-login --region ${AWS_REGION} --no-include-email --registry-ids ${AWS_ACCOUNT})
            export REPOSITORY_URL=${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/
            make push_image

      # Remove this once deploy logic is fully adapted to Assets repos
      - run:
          name: push image to Stage repo
          command: |
            export AWS_ACCOUNT=${AWS_ACCOUNT_STAGE}
            eval $(aws ecr get-login --region ${AWS_REGION} --no-include-email --registry-ids ${AWS_ACCOUNT})
            export REPOSITORY_URL=${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/
            make push_image

      # Persist the specified paths (workspace/image*) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be absolute path or relative path from working_directory
          root: *workspace_root
          # Must be relative path from root
          paths:
            - image_url

  # These two tasks - flake & black - run super fast.
  # makes sense to reuse same exact instance in CI,
  # since prep takes longer than run of both.
  run_lint:
    machine:
      image: circleci/classic:latest
    environment:
      - AWS_ACCOUNT_PROD: "583912811210"
      - AWS_ACCOUNT_STAGE: "897117390337"
      - AWS_ACCOUNT_ASSETS: "936368275341"
      - AWS_REGION: "us-east-1"
    steps:
      - *attach_workspace
      - checkout
      - run :
          name: auth AWS ECR and Docker Hub
          command: |
            set -exu
            docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}
            eval $(aws ecr get-login --region ${AWS_REGION} --no-include-email --registry-ids ${AWS_ACCOUNT_ASSETS})
      - run :
          name: check flake8
          command: docker run --rm `cat /tmp/workspace/image_url` sh -c "flake8 --filename=*.py"
      - run :
          name: check black
          command: docker run --rm `cat /tmp/workspace/image_url` sh -c "black --skip-string-normalization --diff --check --line-length 120 --target-version py36 ."


  run_tests:
    machine:
      image: circleci/classic:latest
    environment:
      - AWS_ACCOUNT_PROD: "583912811210"
      - AWS_ACCOUNT_STAGE: "897117390337"
      - AWS_ACCOUNT_ASSETS: "936368275341"
      - AWS_REGION: "us-east-1"
    steps:
      - *attach_workspace
      - checkout

      # Get the latest supported Docker Compose from Circle S3 repo & remove old copy
      # https://github.com/CircleCI-Public/circleci-dockerfiles/blob/master/python/images/3.6.4-jessie/Dockerfile#L60
      - run :
          name: update docker-compose
          command: |
            set -exu
            export COMPOSE_URL="https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest"
            sudo rm -fr /usr/local/bin/docker-compose
            sudo curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL
            sudo chmod +x /usr/bin/docker-compose

      - run :
          name: auth AWS ECR and Docker Hub
          command: |
            set -exu
            docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}
            eval $(aws ecr get-login --region ${AWS_REGION} --no-include-email --registry-ids ${AWS_ACCOUNT_ASSETS})

      - run :
          name: run tests
          command: |
            set -exu
            export IMAGE_NAME_FULL=`cat /tmp/workspace/image_url`
            make test


workflows:
  version: 2
  build:
    jobs:
      - publish_image

      - run_tests:
          requires:
            - publish_image

      - run_lint:
          requires:
            - publish_image
