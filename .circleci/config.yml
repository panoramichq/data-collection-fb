# CircleCI Data Collection config

version: 2

jobs:
  build_image:
    docker:
      - image: circleci/python:3.6-jessie-node

    environment:
      - PUSH_IMAGE_NAME_PREFIX: "897117390337.dkr.ecr.us-east-1.amazonaws.com/operam/data-collection-fb"

    steps:
      - setup_remote_docker:
          docker_layer_caching: true

      # Install AWS CLI
      - run: sudo pip install awscli --upgrade

      - checkout

      # Setup workspace directory
      - run: mkdir -p /tmp/workspace

      # build and push Docker image & record data in workspace
      # Note that this will push 2 images, one tagged with the branch name and the other with the build ID
      - run: |
          export PUSH_IMAGE_NAME_BUILD=${PUSH_IMAGE_NAME_PREFIX}:${CIRCLE_BUILD_NUM}-$(git rev-parse --short HEAD)
          echo ${PUSH_IMAGE_NAME_BUILD} > /tmp/workspace/image_url
          echo ${CIRCLE_BUILD_NUM}-$(git rev-parse --short HEAD) > /tmp/workspace/image_name
          echo $(git rev-parse --abbrev-ref HEAD) > /tmp/workspace/branch_name
          docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}
          eval $(aws ecr get-login --region us-east-1 --no-include-email)
          eval $(aws ecr get-login --region us-west-2 --no-include-email)
          make push_image

      # Persist the specified paths (workspace/image*) into the workspace for use in downstream job.
      - persist_to_workspace:
          # Must be absolute path or relative path from working_directory
          root: /tmp/workspace
          # Must be relative path from root
          paths:
            - image_url
            - image_name
            - branch_name

  publish_to_docker_hub_and_prod:
    docker:
      - image: circleci/python:3.6-jessie-node

    environment:
      - PUSH_IMAGE_NAME_PREFIX: "operam/data-collection-fb"
      - PUSH_IMAGE_NAME_PREFIX2: "583912811210.dkr.ecr.us-east-1.amazonaws.com/operam/data-collection-fb"

    steps:
      - setup_remote_docker

      - attach_workspace:
          at: /tmp/workspace

      # Install AWS CLI
      - run: sudo pip install awscli --upgrade

      # Auth all the docker sources and pull the original source
      - run : |
          export IMAGE_NAME_FULL=`cat /tmp/workspace/image_url`
          docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}
          eval $(aws ecr get-login --region us-east-1 --no-include-email)
          eval $(aws ecr get-login --region us-east-1 --no-include-email --registry-ids 583912811210)
          eval $(aws ecr get-login --region us-west-2 --no-include-email)
          docker pull ${IMAGE_NAME_FULL}

      # Tag & push images to Docker Hub
      - run : |
          export IMAGE_URL=`cat /tmp/workspace/image_url`
          export IMAGE_NAME=`cat /tmp/workspace/image_name`
          export IMAGE_BRANCH_NAME=`cat /tmp/workspace/branch_name`
          docker tag ${IMAGE_URL} ${PUSH_IMAGE_NAME_PREFIX}:${IMAGE_NAME}
          docker tag ${IMAGE_URL} ${PUSH_IMAGE_NAME_PREFIX}:${IMAGE_BRANCH_NAME}
          docker tag ${IMAGE_URL} ${PUSH_IMAGE_NAME_PREFIX2}:${IMAGE_NAME}
          docker tag ${IMAGE_URL} ${PUSH_IMAGE_NAME_PREFIX2}:${IMAGE_BRANCH_NAME}
          docker push ${PUSH_IMAGE_NAME_PREFIX}:${IMAGE_NAME}
          docker push ${PUSH_IMAGE_NAME_PREFIX}:${IMAGE_BRANCH_NAME}
          docker push ${PUSH_IMAGE_NAME_PREFIX2}:${IMAGE_NAME}
          docker push ${PUSH_IMAGE_NAME_PREFIX2}:${IMAGE_BRANCH_NAME}

  publish_image_id_to_ssm:
    docker:
      - image: circleci/python:3.6-jessie-node

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - checkout

      # Install AWS CLI
      - run: sudo pip install awscli --upgrade

      - run : |
          export AWS_REGION=us-east-1
          export IMAGE_NAME=`cat /tmp/workspace/image_name`
          export IMAGE_BRANCH_NAME=`cat /tmp/workspace/branch_name`

            if [ $IMAGE_BRANCH_NAME = "master" ] # Master branch is deployed to staging aws account.
            then
                export SSM_PARAM_SUFFIX="staging"
            else
                export SSM_PARAM_SUFFIX=$IMAGE_BRANCH_NAME
            fi

          export AWS_ACCESS_KEY_ID=AKIAIEALXSNAAK2QWY4Q
          export AWS_SECRET_ACCESS_KEY=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
          aws configure set default.region $AWS_REGION
          aws ssm put-parameter --overwrite --name "data-collection-fb-${SSM_PARAM_SUFFIX}" --type "String" --value ${IMAGE_NAME}

  run_flake8:
    docker:
    - image: circleci/python:3.6-jessie-node
    steps:
    - checkout
    - run: sudo pip install -r requirements.dev.txt
    - run: flake8 --filename=*.py

  run_yapf:
    docker:
    - image: circleci/python:3.6-jessie-node
    steps:
    - checkout
    - run: sudo pip install -r requirements.dev.txt
    - run: yapf . --recursive --diff

  run_tests:
    machine:
      image: circleci/classic:latest

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - checkout

      # Get the latest supported Docker Compose from Circle S3 repo & remove old copy
      # https://github.com/CircleCI-Public/circleci-dockerfiles/blob/master/python/images/3.6.4-jessie/Dockerfile#L60
      - run : |
          export COMPOSE_URL="https://circle-downloads.s3.amazonaws.com/circleci-images/cache/linux-amd64/docker-compose-latest"
          sudo rm -fr /usr/local/bin/docker-compose
          sudo curl --silent --show-error --location --fail --retry 3 --output /usr/bin/docker-compose $COMPOSE_URL
          sudo chmod +x /usr/bin/docker-compose

      - run : |
          export IMAGE_NAME_FULL=`cat /tmp/workspace/image_url`
          eval $(aws ecr get-login --region us-east-1 --no-include-email)
          eval $(aws ecr get-login --region us-west-2 --no-include-email)
          make test

  deploy_staging:
    docker:
      - image: circleci/python:3.6-jessie-node

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - checkout

      # Install AWS CLI
      - run: sudo pip install awscli --upgrade

      - run : |
          export AWS_REGION=us-east-1
          export IMAGE_NAME_FULL=`cat /tmp/workspace/image_url`
          bash .circleci/deploy.sh --cluster 1c5595_data_collection --service celery --task 1c5595_datacol_celery ${IMAGE_NAME_FULL}
          bash .circleci/deploy.sh --cluster 1c5595_data_collection --service celery-long --task 1c5595_datacol_celery_long ${IMAGE_NAME_FULL}

  deploy_production:
    docker:
      - image: circleci/python:3.6-jessie-node

    steps:
      - attach_workspace:
          at: /tmp/workspace

      - checkout

      # Install AWS CLI
      - run: sudo pip install awscli --upgrade

      # Assume role in prod account then deploy
      - run : |
          export AWS_REGION=us-east-1
          export IMAGE_NAME_FULL=`cat /tmp/workspace/image_url | sed 's/897117390337/583912811210/'`
          aws --output json sts assume-role --role-arn arn:aws:iam::583912811210:role/circleci --role-session-name "CirleCI" > /tmp/awsauth
          export AWS_ACCESS_KEY_ID=`cat /tmp/awsauth | jq -r -e .Credentials.AccessKeyId`
          export AWS_SECRET_ACCESS_KEY=`cat /tmp/awsauth | jq -r -e .Credentials.SecretAccessKey`
          export AWS_SESSION_TOKEN=`cat /tmp/awsauth | jq -r -e .Credentials.SessionToken`
          bash .circleci/deploy.sh --cluster b3fb5e_data_collection --service celery --task b3fb5e_datacol_celery ${IMAGE_NAME_FULL}
          bash .circleci/deploy.sh --cluster b3fb5e_data_collection --service celery-long --task b3fb5e_datacol_celery_long ${IMAGE_NAME_FULL}

workflows:
  version: 2
  build:
    jobs:
      - build_image

      - run_tests:
          requires:
            - build_image

      - publish_to_docker_hub_and_prod:
          requires:
            - build_image

      - publish_image_id_to_ssm:
          requires:
            - build_image
          filters:
            branches:
              only:
                - master
                - production
      - run_flake8
      - run_yapf

      # - hold_for_deploy_staging:
      #     type: approval
      #     requires:
      #       - run_tests
      #     filters:
      #       branches:
      #         only:
      #           - staging

      # - deploy_staging:
      #     requires:
      #       - hold_for_deploy_staging

      # - hold_for_deploy_production:
      #     type: approval
      #     requires:
      #       - run_tests
      #     filters:
      #       branches:
      #         only:
      #           - production

      # - deploy_production:
      #     requires:
      #       - hold_for_deploy_production
